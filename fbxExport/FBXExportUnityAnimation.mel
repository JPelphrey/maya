// --------------------------------------------------------------------
// FBXExportUnityAnimation.mel
// --------------------------------------------------------------------
//
// Author: Morten Dalgaard Andersen
// Author URI: http://www.amorten.com
//
// License: GNU General Public License v2 or later
// License URI: http://www.gnu.org/licenses/gpl-2.0.html
//
// Version: 1.0
// Modified: 2015-03-03
//
// --------------------------------------------------------------------
//
// Instructions on how to use:
//
//  1.	Copy the script to the Maya script folder.
//
//  2.	Execute FBXExportUnityAnimation from the script editor.
//


// --------------------------------------------------------------------
//                                                                   //
//                    FBXExport Unity Animation                      //
//                                                                   //
// --------------------------------------------------------------------

global proc FBXExportUnityAnimation ()
{
	// Try load FBX plug-in
	loadPlugin -quiet fbxmaya;

	if (`window -exists fbxua_window`)
		fbxua_savePrefs();

	fbxua_ui();
}


global proc fbxua_savePrefs()
{
	// Get global variables in window
	global float $fbxua_start; // animation start
	global float $fbxua_end; // animation end
	global string $fbxua_model; // model, Lou or Dawn
	global string $fbxua_animation; // animation, Cycle_Walk etc.
	global int $fbxua_animationOnly;
	global string $fbxua_location; // export location

	// Only set variables, if window exist
	if (`window -exists fbxua_window`)
	{
		// Save values in Maya prefs options
		optionVar -fv "fbxua_ov_start" `floatField -q -v fbxua_ui_start`;
		optionVar -fv "fbxua_ov_end" `floatField -q -v fbxua_ui_end`;
		// optionVar -sv "fbxua_ov_model" `textField -q -tx fbxua_ui_model`;
		optionVar -sv "fbxua_ov_animation" `textField -q -tx fbxua_ui_animation`;
		optionVar -iv "fbxua_ov_animationOnly" `checkBox -q -v fbxua_ui_animationOnly`;
		optionVar -sv "fbxua_ov_location" $fbxua_location;

		// To know when prefs are saved
		optionVar -iv "fbxua_ov_savedPrefs" 1;
	}

}

// User Interface
global proc fbxua_ui()
{
	// Variables
	global float $fbxua_start; // animation start
	global float $fbxua_end; // animation end
	global string $fbxua_model; // model, Lou or Dawn
	global string $fbxua_animation; // animation, Cycle_Walk etc.
	global int $fbxua_animationOnly;
	global string $fbxua_location; // export location
	global string $fbxua_ui_actor; // option menu
	global string $fbxua_clipLayout;

	// If settings have been saved
	if (`optionVar -q "fbxua_ov_savedPrefs"`)
	{
		optionVar -iv "fbxua_ov_savedPrefs" 1;

		// Query option variables
		$fbxua_start = `optionVar -q "fbxua_ov_start"`;
		$fbxua_end = `optionVar -q "fbxua_ov_end"`;
		// $fbxua_model = `optionVar -q "fbxua_ov_model"`;
		$fbxua_animation = `optionVar -q "fbxua_ov_animation"`;
		$fbxua_animationOnly = `optionVar -q "fbxua_ov_animationOnly"`;
		$fbxua_location = `optionVar -q "fbxua_ov_location"`;
	}
	else
	{
		// Set default values
		$fbxua_start = `playbackOptions -q -animationStartTime`;
		$fbxua_end = `playbackOptions -q -animationEndTime`;
		$fbxua_model = "";
		$fbxua_animation = "";
		$fbxua_animationOnly = 0;
		$fbxua_location = `workspace -q -dir`;
	}

	// Remove window and prefs if exist
	if ( `window -exists fbxua_window`) {
		deleteUI -window fbxua_window;
	}

	if ( `windowPref -exists fbxua_window`) {
		windowPref -remove fbxua_window;
	}

	// Create the window
	global string $fbxua_window;
	$fbxua_window = `window
		-t "FBX Export Animation for Unity"
		-s false
		-rtf true
		fbxua_window`;

	int $loc_size = size($fbxua_location);
	string $short_location;
	if ($loc_size > 40)
		$short_location = "..." + substring($fbxua_location, $loc_size - 40, $loc_size);
	else
		$short_location = $fbxua_location;

	// Setup the window layout
	int $label_width = 70;
	int $lf = 225; // large field
	int $mf = 130; // medium field
	int $sf = 110; // small field
	int $label_height = 26;

	rowColumnLayout -nr 1;
		columnLayout -rs 5 -co "both" 5;

			// Header
			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 10;
				text -l "" -w $label_width;
				image -ebg 0 -image "" -w 32 -h 32 fbxua_ui_image;
				text -l "FBX Animation Exporter" -font "boldLabelFont" -h 32 -w 188 -align "left";
			setParent..;

			// Character
			rowColumnLayout -nr 1 -cs 1 5;
				text -l "Actor" -align "right" -w $label_width -h $label_height;
				string $fbxua_ui_actor = `optionMenu -l "" -h $label_height -w $lf fbxua_ui_actor`;
			setParent..;

			// Animation Start/End
			rowColumnLayout -nr 1 -cs 1 5;
				text -l "Start/End" -align "right" -w $label_width -h $label_height;
				floatField -v $fbxua_start -minValue -100000 -maxValue 100000 -step 1 -pre 0 -w $sf -h $label_height fbxua_ui_start;
				floatField -v $fbxua_end -minValue -100000 -maxValue 100000 -step 1 -pre 0 -w $sf -h $label_height fbxua_ui_end;
			setParent..;

			// Model
			// rowColumnLayout -nr 1 -cs 1 5;
			// 	text -l "Model" -align "right" -w $label_width -h $label_height;
			// 	textField -text $fbxua_model -pht "e.g. Lou" -w $lf -h $label_height fbxua_ui_model;
			// setParent..;

			// Animation Clips
			$fbxua_clipLayout = `rowColumnLayout -nc 1 -rs 1 5`;
				rowColumnLayout -nr 1 -cs 1 5;
					text -l "Filename" -align "right" -w $label_width -h $label_height;
					textField -text $fbxua_animation -pht "e.g. Lou@Cycle_Walk" -w $lf -h $label_height fbxua_ui_animation;
				setParent..;
			setParent..;

			// Animation Only
			rowColumnLayout -cs 1 5 -nr 1;
				text -l "" -align "right" -w $label_width -h $label_height;
				checkBox -v $fbxua_animationOnly -l "Only Export Animation" fbxua_ui_animationOnly;
			setParent..;

			// Location
			rowColumnLayout -nr 2 -cs 1 5;
				button -l "Set Export Folder" -ebg 0 -h $label_height -w 300 -c "fbxua_fileLocation;";
				text -l $short_location -align "center" -w 300 -h $label_height -font "obliqueLabelFont" -rs true -wordWrap true fbxua_ui_location;
			setParent..;

			rowColumnLayout -nr 1 -cs 1 6 -ro 1 "bottom" 5;
				button -l "Save Settings" -w 147 -h $label_height -c "fbxua_savePrefs; deleteUI -window fbxua_window";
				button -l "Export" -w 147 -h $label_height -c "fbxua_export;";
			setParent..;

		setParent ..;
	setParent ..;

	// Build actor menu
	fbxua_characterMenu();
	fbxua_image();

	showWindow;
}

global proc fbxua_characterMenu()
{
	global string $fbxua_ui_actor;

	// Clear menu items
	string $menuItems[] = `optionMenu -q -ill $fbxua_ui_actor`;
	int $size = size($menuItems);

	if ($size > 0)
	{
		for ($i = 0; $i < $size; ++$i)
		{
			deleteUI -menuItem $menuItems[$i];
		}
	}

	int $count = 0;

	// Rebuild menu items
	string $actors[] = `ls -as "*:*Actor*"`;
	fbxua_addActor($actors);
	$count += size($actors);

	string $actors[] = `ls -as "*Actor*"`;
	fbxua_addActor($actors);
	$count += size($actors);

	string $actors[] = `ls -as "*:*actor*"`;
	fbxua_addActor($actors);
	$count += size($actors);

	string $actors[] = `ls -as "*actor*"`;
	fbxua_addActor($actors);
	$count += size($actors);

	if ($count == 0) {
		string $actors[] = {"(Missing Actor Rig)"};
		fbxua_addActor($actors);
	}
}

global proc fbxua_addActor(string $actors[]) {
	global string $fbxua_ui_actor;

	if ($actors[0] == "(Missing Actor Rig)") {
		menuItem -parent $fbxua_ui_actor -label $actors[0];
		return;
	}

	int $size = size($actors);

	if ($size > 0)
	{
		for ($i = 0; $i < $size; ++$i)
		{
			menuItem -parent $fbxua_ui_actor -label $actors[$i];
		}
	}
}

global proc fbxua_fileLocation() {
	global string $fbxua_location;
	global string $fbxua_ui_actor;


	if ($fbxua_location == "") {
		$fbxua_location = `workspace -q -dir`;
	}

	string $fileFilter = "*.fbx";

	string $folder[] = `fileDialog2
		-dialogStyle 2
		-caption "Set Export Folder"
		-dir $fbxua_location
		-fileFilter $fileFilter
		-fm 0`;

	if (size($folder))
	{
		$fbxua_location = dirname($folder[0]);

		int $loc_size = size($fbxua_location);
		string $short_location;
		if ($loc_size > 40)
			$short_location = "..." + substring($fbxua_location, $loc_size - 40, $loc_size);
		else
			$short_location = $fbxua_location;

		text -edit -l $short_location fbxua_ui_location;

		string $filename = basenameEx($folder[0]);
		textField -e -tx $filename fbxua_ui_animation;
	}


}

global proc fbxua_export() {
	global string $fbxua_location;
	global string $fbxua_ui_actor;

	string $actor = `optionMenu -q -v $fbxua_ui_actor`;

	if ($actor == "(Missing Actor Rig)") {
		confirmDialog
			-title "Missing Actor Rig"
			-message "No actor rig was found in the scene.\n\nPlease verify one exists and that it\'s name contains \"actor\"."
			-ma "left"
			-icon "information"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";

		return;
	}

	string $selection[] = `ls -selection`;
	select -r $actor;

	// Current scene units
	string $unit = `currentUnit -q -l`;

	float $scale_factor = 1;
	string $convert_unit = $unit;

	// Set scene to centimeters
	currentUnit -l "cm";

	if ($unit == "m") {
		$convert_unit = "cm";
		print "\n// Scale Factor = 100.00 (m to cm)\n";
	} else if ($unit == "cm") {
		$convert_unit = "cm";
		print "\n// Scale Factor = 1.00 (cm to cm)\n";
	}

	// Get values
	float $start = `floatField -q -v fbxua_ui_start`;
	float $end = `floatField -q -v fbxua_ui_end`;
	// string $model = basenameEx(`textField -q -tx fbxua_ui_model`);
	string $animation = basenameEx(`textField -q -tx fbxua_ui_animation`);
	int $animationOnly = `checkBox -q -v fbxua_ui_animationOnly`;

	string $filename = $animation;

	if ($start > $end) {
		confirmDialog
			-title "Check Animation Start/End"
			-message "It appears your start frame is after your end frame.\n\nPlease change this."
			-ma "left"
			-icon "information"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";

		return;
	}

	// Disable undo
	undoInfo -stateWithoutFlush false;

	// Change playback options to modify start/end
	float $p_ast = `playbackOptions -q -ast`;
	float $p_aet = `playbackOptions -q -aet`;
	float $p_min = `playbackOptions -q -min`;
	float $p_max = `playbackOptions -q -max`;
	playbackOptions -ast $start -aet $end;

	if (size($filename))
	{
		string $file = $fbxua_location + "/" + $filename + ".fbx";

		// Export Properties
		FBXProperty Export|IncludeGrp|Animation -v 1;
		FBXExportAnimationOnly -v $animationOnly;
		FBXExportBakeComplexAnimation -v 1;
		FBXExportBakeComplexStart -v $start;
		FBXExportBakeComplexEnd -v $end;
		FBXExportBakeComplexStep -v 1;
		FBXExportBakeResampleAnimation -v 1;
		FBXExportUseSceneName -v 1;

		// Define animation takes
		FBXExportSplitAnimationIntoTakes -c;
		// FBXExportSplitAnimationIntoTakes -v $animation $start $end;

		FBXExportCameras -v 0;
		FBXExportConstraints -v 0;
		FBXExportLights -v 0;
		FBXExportSmoothMesh -v 1;
		FBXExportShapes -v 1;
		FBXExportSkins -v 1;
		FBXExportSkeletonDefinitions -v 0;
		FBXExportInputConnections -v 1;
		FBXExportScaleFactor $scale_factor; // float
		FBXExportConvertUnitString $convert_unit;
		FBXExportReferencedAssetsContent -v 1;
		FBXExportFileVersion -v "FBX201400";

		// Export
		FBXExport -f $file -s;
		print ("\n// FBX export: " + $file + "\n");
	}
	else
	{
		confirmDialog
			-title "No Filename Specified"
			-message "Please enter a filename."
			-ma "left"
			-icon "warning"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
	}

	// Re-select old selection
	select -r $selection;

	// Set playback options back to default
	playbackOptions -ast $p_ast -aet $p_aet -min $p_min -max $p_max;

	// Re-enable undo
	undoInfo -stateWithoutFlush true;

	// Set scene to meters
	currentUnit -l "m";
}

global proc fbxua_image() {
	// Find path of script
	string $result = `whatIs FBXExportUnityAnimation`;
	string $tokens[];
	tokenize $result " " $tokens;
	string $image_src = dirname($tokens[4]) + "/" + "FBXExportUnityAnimation.png";

	image -e -image $image_src fbxua_ui_image;
}