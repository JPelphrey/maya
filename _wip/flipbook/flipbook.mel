// --------------------------------------------------------------------
// flipbook.mel
// --------------------------------------------------------------------
//
// Author: Morten Dalgaard Andersen
// Author URI: http://www.montsoe.com
//
// License: GNU General Public License v2 or later
// License URI: http://www.gnu.org/licenses/gpl-2.0.html
//
// Version: 0.30b
// Modified: 2015-03-27
//
// --------------------------------------------------------------------
//
// Instructions on how to use:
//
//  1.	Copy the script to the Maya script folder.
//
//  2.	Execute flipbook from the script editor.
//


// --------------------------------------------------------------------
//                                                                   //
//                         THE FLIPBOOK SCRIPT                       //
//                                                                   //
// --------------------------------------------------------------------


// BUGS :(
// --------------------------------------------------------------------
// None :D


// WISH LIST :)
// --------------------------------------------------------------------
// - Add special characters to selection of hotkeys.
//
// - Focus Mode, allow to focus in on a specific part of the timeline,
//   without playing.
//
// - Start/End time range.
//
// - Option to hide all non-geometry
//
// - Dock minimized version of window


// VARIABLE AND PROC PREFIXES
// --------------------------------------------------------------------
// "none"	- Procs that ought to be run by the user, and local vars.
// fb_		- Default vars and procs
// fbc_		- Commands
// fbkey_	- Hotkey
// fbui_	- User Interface
// fbov_	- Option Variable
// fbte_	- Time error


// DOCK SETTINGS
// --------------------------------------------------------------------
// Time Range
// Start, enable, before, after
//


// FLIPBOOK
// --------------------------------------------------------------------
global proc flipbook() {
	global int $fb_init;
	global string $fb_title;
	global int $fb_hideUI;
	global int $fb_playing;
	global float $fb_fps;

	// query current time units, and get scene fps
	float $fps = fb_timeUnit();
	$fb_fps = $fps;

	// Check if scene frame rate is within flipbooks capability
	if ( $fps < 1 ) {
		$fb_init = 2;
	}

	if ( $fb_init == 1 ) {
		// Script has been run once
		flipbookUI();
		$fb_playing = `play -q -st`;
	} else if ( $fb_init == 0 ) {
		// First run
		$fb_init = 1;
		$fb_title = "flipbook 0.30b";

		// Set default user values
		global int $fb_timeRange;
		global float $fb_startFrame;
		global int $fb_startFrameState;
		global float $fb_framesBefore;
		global float $fb_framesAfter;
		global string $fb_loop;
		global int $fb_expand;
		global int $fb_backwards;
		global int $fb_pef; // play every frame
		global float $fb_by;
		global float $fb_psm; // playback speed multiplier
		global int $fb_ba; // blocking anim, stepped preview
		global string $fb_view; // update views, "all" or "active"

		if ( `optionVar -q "fbov_savedPrefs"` ) {
			optionVar -iv "fbov_savedPrefs" 1;

			// Query option variables
			$fb_timeRange = `optionVar -q "fbov_timeRange"`;
			$fb_startFrame = `optionVar -q "fbov_startFrame"`;
			$fb_startFrameState = `optionVar -q "fbov_startFrameState"`;
			$fb_framesBefore = `optionVar -q "fbov_framesBefore"`;
			$fb_framesAfter = `optionVar -q "fbov_framesAfter"`;
			$fb_loop = `optionVar -q "fbov_loop"`;
			$fb_expand = `optionVar -q "fbov_expand"`;
			$fb_backwards = `optionVar -q "fbov_backwards"`;
			$fb_fps = `optionVar -q "fbov_fps"`;
			$fb_pef = `optionVar -q "fbov_pes"`;
			$fb_psm = `optionVar -q "fbov_psm"`;
			$fb_by = `optionVar -q "fbov_by"`;
			$fb_ba = `optionVar -q "fbov_ba"`;
			$fb_view = `optionVar -q "fbov_view"`;

			if ( $fb_hideUI != 1 ) {
				flipbookUI();
			}
			$fb_hideUI = 0;

		} else {
			// Set default options
			$fb_timeRange = 0; // 1 to use time slider instead of before/after
			$fb_startFrame = 1;
			$fb_startFrameState = 0;
			$fb_framesBefore = 0;
			$fb_framesAfter = 12;
			$fb_loop = "once";
			$fb_expand = 0;
			$fb_backwards = 0;
			$fb_psm = 1;
			$fb_by = `playbackOptions -q -by`;
			$fb_ba = `playbackOptions -q -ba`;
			$fb_view = `playbackOptions -q -view`;

			if ( `playbackOptions -q -ps` == 0 ) {
				$fb_pef = 1;
			} else {
				$fb_pef = 0;
			}

			if ( $fb_hideUI != 1 ) {
				flipbookUI();
			}
			$fb_hideUI = 0;
			$fb_playing = `play -q -st`;
		}
	} else {
		// Warning window, allowing the user to change time setting, if necessary
		$fb_init = 0;
		fb_timeSettingError();
	}
}

global proc fb_timeSettingError() {
	if ( `window -exists fbte_window` ) deleteUI -window fbte_window;
	if ( `windowPref -exists fbte_window` ) windowPref -remove fbte_window;

	window -t "flipbook" -s false fbte_window;

	columnLayout -rs 5 -co "both" 5 -w 350;
		// Header
		rowColumnLayout -nr 1 -ro 1 "top" 5;
			text -l "Time Setting Error!" -align "left" -fn "boldLabelFont";
		setParent ..;

		// Separator
		rowColumnLayout -nr 1 -ro 1 "both" 5;
			separator -style "none" -bgc 0.41 0.41 0.41 -w 350 -h 1;
		setParent ..;

		// Text
		rowColumnLayout -nr 1;
			text -align "left" -wordWrap true -w 350 -l "flipbook cannot work with your current scene time settings.\n\nPlease change them to something other than:\n- seconds\n- minutes\n- hours";
		setParent ..;

		// Time
		rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 10;
			text -l "Time:" -h 20;
			optionMenu -l "" -w 125 -h 20 fbte_option;
				menuItem -l "15 fps";
				menuItem -l "Film (24 fps)";
				menuItem -l "PAL (25 fps)";
				menuItem -l "NTSC (30 fps)";
				menuItem -l "Show (48 fps)";
				menuItem -l "PAL Field (50 fps)";
				menuItem -l "NTSC Field (60 fps)";
			checkBox -l "Keep keys at current frames" -v 0 fbte_keepKeys;
		setParent ..;

		// Save and Reset, Cancel
		rowColumnLayout -nr 1 -cs 1 4 -ro 1 "bottom" 5;
			button -l "Save and Reset" -c "fb_changeTimeUnit" -w 173 -h 23;
			button -l "Cancel" -c "deleteUI -window fbte_window" -w 173 -h 23;
		setParent ..;
	setParent ..;

	showWindow;
}

global proc fb_changeTimeUnit() {
	string $value = `optionMenu -q -v fbte_option`;
	string $kk = `checkBox -q -v fbte_keepKeys`;

	if ( $kk == 0 ) {
		switch ($value) {
			case "15 fps":
				currentUnit -t "game";
				break;
			case "Film (24 fps)":
				currentUnit -t "film";
				break;
			case "PAL (25 fps)":
				currentUnit -t "pal";
				break;
			case "NTSC (30 fps)":
				currentUnit -t "ntsc";
				break;
			case "Show (48 fps)":
				currentUnit -t "show";
				break;
			case "PAL Field (50 fps)":
				currentUnit -t "palf";
				break;
			case "NTSC Field (60 fps)":
				currentUnit -t "ntscf";
				break;
		}
	} else {
		switch ($value) {
			case "15 fps":
				currentUnit -t "game" -ua false;
				break;
			case "Film (24 fps)":
				currentUnit -t "film" -ua false;
				break;
			case "PAL (25 fps)":
				currentUnit -t "pal" -ua false;
				break;
			case "NTSC (30 fps)":
				currentUnit -t "ntsc" -ua false;
				break;
			case "Show (48 fps)":
				currentUnit -t "show" -ua false;
				break;
			case "PAL Field (50 fps)":
				currentUnit -t "palf" -ua false;
				break;
			case "NTSC Field (60 fps)":
				currentUnit -t "ntscf" -ua false;
				break;
		}
	}

	deleteUI -window fbte_window;
	flipbook();
}


// FLIPBOOK UI
// --------------------------------------------------------------------

global proc flipbookUI() {
	// All variables related to the ui should be named like fbui_example
	// Get global variables
	global int $fb_timeRange;
	global float $fb_startFrame;
	global int $fb_startFrameState;
	global float $fb_framesBefore;
	global float $fb_framesAfter;
	global string $fb_loop;
	global int $fb_expand;
	global int $fb_backwards;
	global float $fb_fps;
	global int $fb_pef;
	global float $fb_psm;
	global float $fb_by;
	global int $fb_ba;
	global string $fb_view;

	// Remove window and window prefs if they already exist
	if ( `window -exists fbui_window` ) {
		deleteUI -window fbui_window;
	}
	if ( `windowPref -exists fbui_window` ) {
		//windowPref -remove fbui_window;
	}

	// The UI window
	global string $fb_title;
	global string $fbui_window;
	$fbui_window = `window -t $fb_title -s false -w 376 fbui_window`;

	// Setup the first row - the menu bar (using columnLayout)
	columnLayout;
		// Menu
		menuBarLayout -h 20 -w 374 -bgc 0.51 0.51 0.51 -ebg 1;
		menu -l "Reset" -en 1;
			menuItem -l "Frame Rate (fps)" -c "float $v = fb_timeUnit(); floatField -e -v $v fbui_fps" -en 1;
			menuItem -l "Reset All Settings..." -c "fb_reset" -en 1;

		menu -l "Hotkey" -en 1;
			menuItem -l "Assign hotkey" -subMenu true;
				menuItem -l "Flip command" -c "fb_key flip";
				menuItem -l "UI command" -c "fb_key ui";
				setParent -menu ..;
			menuItem -l "Remove hotkey" -subMenu true;
				menuItem -l "Flip command" -c "fb_removeKey flip 1";
				menuItem -l "UI command" -c "fb_removeKey ui 1";
				setParent -menu ..;
		setParent ..;
		// Drop shadow
		separator -style "none" -bgc 0.18 0.18 0.18 -ebg 1 -w 374 -h 1;
		separator -style "none" -bgc 0.22 0.22 0.22 -ebg 1 -w 374 -h 1;
		separator -style "none" -bgc 0.25 0.25 0.25 -ebg 1 -w 374 -h 1;
	setParent ..;


	// START OF BIG WINDOW LAYOUT

	int $lw = 130;
	columnLayout -rs 5 -co "both" 5;
		// Time Range
		rowColumnLayout -nr 1 -cs 1 5 -ro 1 "top" 5;
			text -l "Time Range" -align "right" -w $lw -h 20;
			radioCollection fbui_timeRangeRadio;
				radioButton -l "Before/After" -onc "fbui_beforeAfter(1)" -w 115 -h 20 fbui_trr1;
				radioButton -l "Time Slider" -onc "fbui_beforeAfter(0)" -h 20 fbui_trr2;
		setParent ..;

		// Separator
		rowColumnLayout -nr 1 -ro 1 "both" 5;
			separator -style "none" -bgc 0.41 0.41 0.41 -w 360 -h 1;
		setParent ..;

		// Start Frame
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "Start Frame" -align "right" -w $lw fbui_startFrameLabel;
			floatField -v $fb_startFrame -minValue -100000 -maxValue 100000 -step 1 -pre 2 -w 80 fbui_startFrame;
			checkBox -v $fb_startFrameState -l "Enable" fbui_startFrameState;
		setParent ..;

		// Frames Before/After
		rowColumnLayout -nc 2 -cs 2 5 -rs 1 5;
			text -l "Frames Before" -align "right" -w $lw fbui_framesBeforeLabel;
			floatField -v $fb_framesBefore -minValue 0 -maxValue 100000 -step 1 -pre 2 -w 80 fbui_framesBefore;
			text -l "Frames After" -align "right" -w $lw fbui_framesAfterLabel;
			floatField -v $fb_framesAfter -minValue 0 -maxValue 100000 -step 1 -pre 2 -w 80 fbui_framesAfter;
		setParent ..;

		// Separator
		rowColumnLayout -nr 1 -ro 1 "both" 5;
			separator -style "none" -bgc 0.41 0.41 0.41 -w 360 -h 1;
		setParent ..;

		// Loop
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "Loop" -align "right" -w $lw;
			radioCollection fbui_loopRadio;
				radioButton -l "Once " fbui_lr1;
				radioButton -l "Oscillate " fbui_lr2;
				radioButton -l "Continuous" fbui_lr3;
		setParent ..;

		// Options: Extend, Backwards, Stepped
		rowColumnLayout -nc 2 -cs 2 5 -rs 1 5;
			text -l "Options" -align "right" -w $lw;
			checkBox -v $fb_expand -l "Expand Animation Start/End Time" fbui_expand;
			text -l "" -w $lw;
			checkBox -v $fb_backwards -l "Backwards" fbui_forward;
			text -l "" -w $lw;
			checkBox -v $fb_ba -l "Stepped Preview" fbui_ba;
		setParent ..;

		// Frame Rate
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "Frame Rate (fps)" -align "right" -w $lw;
			floatField -v $fb_fps -minValue 1 -maxValue 6000 -step 0.5 -pre 2 -w 80 fbui_fps;
			checkBox -v $fb_pef -l "Play Every Frame" -onc "fbui_byFrame(1)" -ofc "fbui_byFrame(0)" fbui_pef;
		setParent ..;

		// By Frame
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "By Frame" -align "right" -w $lw fbui_byLabel;
			floatField -v $fb_by -minValue 0 -maxValue 6000 -step 0.25 -pre 3 -w 80 fbui_by;
			text -l "Play every x frame\(s\)" -align "left" fbui_byText;
		setParent ..;

		// Playback speed
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "Playback Speed" -align "right" -w $lw;
			optionMenu -l "" -h 20 -w 225 fbui_playbackSpeed;
				menuItem -l "Quarter [0.25x]";
				menuItem -l "Half [0.5x]";
				menuItem -l "Normal [1x]";
				menuItem -l "Twice [2x]";
				menuItem -l "Four [4x]";
			switch ($fb_psm) {
				case 1.0:
					optionMenu -e -select 3 fbui_playbackSpeed;
					break;
				case 0.5:
					optionMenu -e -select 2 fbui_playbackSpeed;
					break;
				case 2.0:
					optionMenu -e -select 4 fbui_playbackSpeed;
					break;
				case 0.25:
					optionMenu -e -select 1 fbui_playbackSpeed;
					break;
				case 4.0:
					optionMenu -e -select 5 fbui_playbackSpeed;
					break;
				default:
					optionMenu -e -select -3 fbui_playbackSpeed;
					break;
			}
		setParent ..;

		// Update views
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "Update Views" -align "right" -w $lw;
			radioCollection fbui_viewRadio;
				$fbui_v1 = `radioButton -l "Active  " fbui_v1`;
				$fbui_v2 = `radioButton -l "All" fbui_v2`;

			if ( $fb_view == "active" ) {
				radioCollection -e -select $fbui_v1 fbui_viewRadio;
			} else {
				radioCollection -e -select $fbui_v2 fbui_viewRadio;
			}
		setParent ..;

		// Flip/Stop
		rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 10;
			button -l "Stop" -c "play -st 0" -w 130 -bgc 0.824 0.516 0.074 -ebg 0;
			button -l "Flip!" -c "fb_flip" -h 23 -w 225 -bgc 0.215 0.613 0.535 -ebg 0 fbui_flipBtn;
		setParent ..;

		// Save, Apply, Close
		rowColumnLayout -nr 1 -cs 1 6 -ro 1 "bottom" 5;
			button -l "Save" -c "fb_prefs 1; deleteUI -window fbui_window" -h 23 -w 116;
			button -l "Apply" -c "fb_prefs 1" -w 116 -h 23;
			button -l "Close" -c "deleteUI -window fbui_window" -w 116 -h 23;
		setParent ..;
	setParent ..;

	// END OF WINDOW LAYOUT

	// Select loop
	if ( $fb_loop == "once" ) {
		radioCollection -e -select fbui_lr1 fbui_loopRadio;
	} else if ( $fb_loop == "oscillate" ) {
		radioCollection -e -select fbui_lr2 fbui_loopRadio;
	} else {
		radioCollection -e -select fbui_lr3 fbui_loopRadio;
	}

	// Select time range
	if ( $fb_timeRange == 0 ) {
		radioCollection -e -select fbui_trr1 fbui_timeRangeRadio;
		fbui_beforeAfter(1);
	} else {
		radioCollection -e -select fbui_trr2 fbui_timeRangeRadio;
		fbui_beforeAfter(0);
	}

	// Select by frame
	if ( $fb_pef ) {
		fbui_byFrame(1);
	} else {
		fbui_byFrame(0);
	}

	// Update flip button
	fbui_flipBtn();

	showWindow;
}

global proc fb_reset() {
	global int $fb_init;
	$fb_init = 0;
	optionVar -iv "fbov_savedPrefs" 0;
	flipbook();
}

global proc fbui_dock() {
	// Dock window
	global string $fbui_window;
	global string $fbui_dock;
	if ( `dockControl -ex $fbui_dock` ) deleteUI -control $fbui_dock;
	$fbui_dock = `dockControl -area "left"
		-content $fbui_window
		-allowedArea "left"
		-allowedArea "right"
		flipbook`;
}

global proc fbui_deleteDock() {
	global string $fbui_dock;
	if ( !(`dockControl -q -vis $fbui_dock`) ) {
		deleteUI -control $fbui_dock;
	}
}

global proc fbui_beforeAfter( int $v ) {
	string $labels[] = {"fbui_startFrameLabel", "fbui_framesBeforeLabel", "fbui_framesAfterLabel"};
	string $intFields[] = {"fbui_startFrame", "fbui_framesBefore", "fbui_framesAfter"};
	string $sfs = "fbui_startFrameState";
	int $i = 0;
	while ( $i < size($labels) ) {
		text -e -en $v $labels[$i];
		floatField -e -en $v $intFields[$i];
		$i++;
	}
	checkBox -e -en $v $sfs;
}

global proc fbui_byFrame( int $v ) {
	string $l = "fbui_byLabel";
	string $f = "fbui_by";
	string $t = "fbui_byText";

	text -e -en $v $l;
	floatField -e -en $v $f;
	text -e -en $v $t;
}

global proc fbui_flipBtn() {
	global string $fb_loop;
	global int $fb_playing;
	string $b = "fbui_flipBtn";

	if ( $fb_playing && $fb_loop != "once" ) {
		button -e -l "Stop" -bgc 1 0.2 0.2 -ebg 0 $b;
	} else if ( `play -q -st` && $fb_loop == "once" ) {
		button -e -l "Rewind" -bgc 0.441 1 0.757 -ebg 0 $b;
	} else {
		button -e -l "Flip!" -bgc 0.215 0.613 0.535 -ebg 0 $b;
	}
}



// PREFERENCES
// --------------------------------------------------------------------

global proc fb_defaults() {
	// Get playback options from Maya
	global int $fb_default_currTime;
	global int $fb_default_minTime;
	global int $fb_default_maxTime;
	global int $fb_default_ast;
	global int $fb_default_aet;
	global string $fb_default_loop;
	global float $fb_default_ps;
	global float $fb_default_mps;
	global float $fb_default_by;
	global int $fb_default_ba;
	global string $fb_default_view;

	$fb_default_currTime = `currentTime -q`;
	$fb_default_minTime = `playbackOptions -q -minTime`;
	$fb_default_maxTime = `playbackOptions -q -maxTime`;
	$fb_default_ast = `playbackOptions -q -ast`;
	$fb_default_aet = `playbackOptions -q -aet`;
	$fb_default_loop = `playbackOptions -q -loop`;
	$fb_default_ps = `playbackOptions -q -ps`;
	$fb_default_mps = `playbackOptions -q -mps`;
	$fb_default_by = `playbackOptions -q -by`;
	$fb_default_ba = `playbackOptions -q -ba`;
	$fb_default_view = `playbackOptions -q -view`;
}

global proc fb_prefs( int $apply ) {
	// Get global variables
	global int $fb_timeRange;
	global float $fb_startFrame;
	global int $fb_startFrameState;
	global float $fb_framesBefore;
	global float $fb_framesAfter;
	global string $fb_loop;
	global int $fb_expand;
	global int $fb_backwards;
	global float $fb_fps;
	global int $fb_pef;
	global float $fb_psm;
	global float $fb_by;
	global int $fb_ba;
	global string $fb_view;

	// Only set variables, if window exists
	if ( `window -exists fbui_window` ) {
		// Set global variables
		string $timeRange = `radioCollection -q -select fbui_timeRangeRadio`;
		if ( $timeRange == "fbui_trr1" ) {
			$fb_timeRange = 0;
		} else {
			$fb_timeRange = 1;
		}

		$fb_startFrame = `floatField -q -v fbui_startFrame`;
		$fb_startFrameState = `checkBox -q -v fbui_startFrameState`;
		$fb_framesBefore = `floatField -q -v fbui_framesBefore`;
		$fb_framesAfter = `floatField -q -v fbui_framesAfter`;

		string $loop = `radioCollection -q -select fbui_loopRadio`;
		if ( $loop == "fbui_lr1" ) {
			$fb_loop = "once";
		} else if ( $loop == "fbui_lr2" ) {
			$fb_loop = "oscillate";
		} else {
			$fb_loop = "continuous";
		}

		$fb_expand = `checkBox -q -v fbui_expand`;
		$fb_backwards = `checkBox -q -v fbui_forward`;
		$fb_fps = `floatField -q -v fbui_fps`;
		$fb_pef = `checkBox -q -v fbui_pef`;
		$fb_by = `floatField -q -v fbui_by`;
		$fb_ba = `checkBox -q -v fbui_ba`;

		string $updateView = `radioCollection -q -select fbui_viewRadio`;
		if ( $updateView == "fbui_v1" ) {
			$fb_view = "active";
		} else {
			$fb_view = "all";
		}

		string $playbackSpeed = `optionMenu -q -v fbui_playbackSpeed`;
		switch ($playbackSpeed) {
			case "Normal [1x]":
				$fb_psm = 1;
				break;
			case "Twice [2x]":
				$fb_psm = 2;
				break;
			case "Half [0.5x]":
				$fb_psm = 0.5;
				break;
			case "Quarter [0.25x]":
				$fb_psm = 0.25;
				break;
			case "Four [4x]":
				$fb_psm = 4;
				break;
			default:
				$fb_psm = 1;
				break;
		}

		// Option Variables
		optionVar -iv "fbov_timeRange" $fb_timeRange;
		optionVar -iv "fbov_startFrame" $fb_startFrame;
		optionVar -iv "fbov_startFrameState" $fb_startFrameState;
		optionVar -iv "fbov_framesBefore" $fb_framesBefore;
		optionVar -iv "fbov_framesAfter" $fb_framesAfter;
		optionVar -sv "fbov_loop" $fb_loop;
		optionVar -iv "fbov_expand" $fb_expand;
		optionVar -iv "fbov_backwards" $fb_backwards;
		optionVar -fv "fbov_fps" $fb_fps;
		optionVar -iv "fbov_pes" $fb_pef;
		optionVar -fv "fbov_psm" $fb_psm;
		optionVar -fv "fbov_by" $fb_by;
		optionVar -iv "fbov_ba" $fb_ba;
		optionVar -sv "fbov_view" $fb_view;
		optionVar -iv "fbov_savedPrefs" 1;
	}

	if ( $apply ) {
		global int $fb_playing;
		if ( $fb_playing ) {
			global int $fb_scriptJob;
			scriptJob -listJobs;
			scriptJob -kill $fb_scriptJob;

			play -st 0;
			fb_applyOptions();
		}
	}
}


// FLIP & CALLBACK
// --------------------------------------------------------------------

global proc fb_flip() {
	// If the main timeline is currently playing, but not through flipbook
	global int $fb_playing;
	if ( $fb_playing == 0 && `play -q -st` ) {
		play -st 0;
	}

	// query current time units, and get scene fps
	float $fps = fb_timeUnit();
	// ... and check if scene frame rate is within flipbooks capability
	if ( $fps < 1 ) {
		$fb_init = 0;
		flipbook();
	} else {
		global int $fb_playing;
		if ( $fb_playing == 0 ) {
			// Set default values before starting, it's important they come
			// before the global variables!
			// - Really?
			fb_defaults();
			fb_prefs(0);
		}

		// Get global variables
		global float $fb_startFrame;
		global int $fb_startFrameState;
		global string $fb_loop;
		global int $fb_backwards;

		global int $fb_default_currTime;
		global int $fb_default_minTime;
		global int $fb_default_maxTime;
		global int $fb_default_ast;
		global int $fb_default_aet;

		global int $fb_scriptJob;

		// Use start frame or current time
		int $startTime;
		if ( $fb_startFrameState == 1 ) {
			$startTime = $fb_startFrame;
		} else {
			$startTime = $fb_default_currTime;
		}

		// Is it playing?
		if ( $fb_playing == 1 ) {
			if ( $fb_loop == "once" ) {
				// Rewind
				scriptJob -listJobs;
				scriptJob -kill $fb_scriptJob;

				play -st 0;
				if ( $fb_backwards == 0 ) {
					global int $fb_minTime;
					undoInfo -stateWithoutFlush false;
					currentTime $fb_minTime;
					undoInfo -stateWithoutFlush true;
					play -st 1 -forward 1;
				} else {
					global int $fb_maxTime;
					undoInfo -stateWithoutFlush false;
					currentTime $fb_maxTime;
					undoInfo -stateWithoutFlush true;
					play -st 1 -forward 0;
				}

				$fb_scriptJob = `scriptJob -runOnce true -conditionFalse "playingBack" "fb_callback"`;
			} else {
				play -st 0;
			}
		} else if ( $fb_playing == 0 ) {
			$fb_playing = 1;
			fb_applyOptions();
		}
	}
}

global proc fb_applyOptions() {
	// Get global variables
	global int $fb_timeRange;
	global float $fb_startFrame;
	global int $fb_startFrameState;
	global float $fb_framesBefore;
	global float $fb_framesAfter;
	global string $fb_loop;
	global int $fb_expand;
	global int $fb_backwards;
	global float $fb_fps;
	global int $fb_pef;
	global float $fb_psm;
	global float $fb_by;
	global int $fb_ba;
	global string $fb_view;

	global int $fb_default_currTime;
	global int $fb_default_minTime;
	global int $fb_default_maxTime;
	global int $fb_default_ast;
	global int $fb_default_aet;

	global int $fb_scriptJob;

	// Use script job to listen for when playback has stopped
	$fb_scriptJob = `scriptJob -runOnce true -conditionFalse "playingBack" "fb_callback"`;

	// Use start frame or current time
	int $startTime;
	if ( $fb_startFrameState == 1 ) {
		$startTime = $fb_startFrame;
	} else {
		$startTime = $fb_default_currTime;
	}

	// Time Range
	global int $fb_minTime;
	global int $fb_maxTime;

	if ( $fb_timeRange == 1 ) {
		// Use Time Slider
		$fb_minTime = $fb_default_minTime;
		$fb_maxTime = $fb_default_maxTime;

		if ( $startTime > $fb_maxTime ) {
			$startTime = $fb_minTime;
		}
	} else {
		// Use Before/After
		// Extend?
		$fb_minTime = ( $startTime - $fb_framesBefore );
		$fb_maxTime = ( $startTime + $fb_framesAfter );

		if ( $fb_minTime < $fb_default_ast && $fb_expand == 0 ) {
			$fb_minTime = $fb_default_ast;
		}

		if ( $fb_maxTime > $fb_default_aet && $fb_expand == 0 ) {
			$fb_maxTime = $fb_default_aet;
		}
	}

	// Playback speed
	float $ps = fb_fpsToSpeed( $fb_fps );
	$ps *= $fb_psm;

	// Play every frame?
	float $mps;
	if ( $fb_pef == 1 ) {
		$mps = $ps;
		$ps = 0; // Play every frame
	} else {
		$mps = 1; // Real-time playback
	}

	undoInfo -stateWithoutFlush false;
	playbackOptions
		-minTime $fb_minTime
		-maxTime $fb_maxTime
		-loop $fb_loop
		-ps $ps
		-mps $mps
		-by $fb_by
		-ba $fb_ba
		-view $fb_view;
	undoInfo -stateWithoutFlush true;

	// Play backwards?
	int $forward;
	if ( $fb_backwards == 1 ) {
		$forward = 0;
		undoInfo -stateWithoutFlush false;
		currentTime $fb_maxTime;
		undoInfo -stateWithoutFlush true;
	} else {
		$forward = 1;
		undoInfo -stateWithoutFlush false;
		currentTime $fb_minTime;
		undoInfo -stateWithoutFlush true;
	}

	// Time to flip
	$fb_playing = 1;
	play -st 1 -forward $forward;

	// Change flip btn
	if ( `window -ex fbui_window` ) fbui_flipBtn();
}

global proc fb_callback() {
	// Retrieve playback options
	global int $fb_default_currTime;
	global int $fb_default_minTime;
	global int $fb_default_maxTime;
	global int $fb_default_ast;
	global int $fb_default_aet;
	global string $fb_default_loop;
	global float $fb_default_ps;
	global float $fb_default_mps;
	global float $fb_default_by;
	global int $fb_default_ba;
	global string $fb_default_view;

	undoInfo -stateWithoutFlush false;
	playbackOptions
		-minTime $fb_default_minTime
		-maxTime $fb_default_maxTime
		-ast $fb_default_ast
		-aet $fb_default_aet
		-loop $fb_default_loop
		-ps $fb_default_ps
		-mps $fb_default_mps
		-by $fb_default_by
		-ba $fb_default_ba
		-view $fb_default_view;

	currentTime $fb_default_currTime;
	undoInfo -stateWithoutFlush true;

	global int $fb_playing;
	$fb_playing = 0;

	if ( `window -ex fbui_window` ) fbui_flipBtn();
}


// TIME UNIT & UNIT CONVERSION
// --------------------------------------------------------------------

global proc float fb_timeUnit() {
	string $timeUnit = `currentUnit -q -time`;
	int $found = 1; // will be set to 0 later, if not found!
	float $result = 0; // default value of 0, to indicate error

	switch( $timeUnit ) {
		case "game":
			$result = 15;
			break;
		case "film":
			$result = 24;
			break;
		case "pal":
			$result = 25;
			break;
		case "ntsc":
			$result = 30;
			break;
		case "show":
			$result = 48;
			break;
		case "palf":
			$result = 50;
			break;
		case "ntscf":
			$result = 60;
			break;
		case "millisec":
			$result = 100;
			break;
		case "sec":
			$result = 1;
			break;
		case "min":
			$result = 1/60;
			break;
		case "hour":
			$result = 1/60/60;
			break;
		default:
			$found = 0;
			break;
	}

	// If none of the above, query setting as fps, e.g. 12fps as a value
	if ( $found == 0 ) {
		string $fps = `substitute "fps" $timeUnit ""`;
		$result = (float)$fps;
	}

	return $result;
}

global proc float fb_fpsToSpeed( float $fps ) {
	// Convert fps to playback speed, relative to time unit
	float $timeUnit = fb_timeUnit();
	float $ps = $fps / $timeUnit;

	return $ps;
}


// HOTKEYS
// --------------------------------------------------------------------

global proc fb_key( string $command ) {
	// Create window
	if ( `window -exists fbkey_window` ) deleteUI -window fbkey_window;
	//if ( `windowPref -exists fbkey_window` ) windowPref -remove fbkey_window;
	window -t "Assign Hotkey" -s false fbkey_window;

	int $lw = 80;
	columnLayout -rs 5 -co "both" 5 -w 260;
		// Text
		rowColumnLayout -nr 1 -ro 1 "top" 5;
			text -l "Note: Assigning a hotkey will remove any previous hotkey associated with this flipbook command." -wordWrap true -w 250 -align "left";
		setParent ..;

		// Separator
		rowColumnLayout -nr 1 -ro 1 "top" 5;
			separator -style "none" -bgc 0.41 0.41 0.41 -w 250 -h 1;
		setParent ..;

		// Key
		rowColumnLayout -nr 1 -cs 1 5;
			text -l "Key:" -w $lw -align "right";
			textField -w 30 fbkey_key;
		setParent ..;

		// Modifiers and direction
		rowColumnLayout -nc 2 -rs 1 5 -cs 2 5 -cs 3 5;
			text -l "Modifiers:" -w $lw -align "right";
			checkBoxGrp -ncb 3 -labelArray3 "Ctrl" "Alt" "Cmd" -cw 1 55 -cw 2 55 -cw 3 55 fbkey_modifiers;
			text -l "Direction:" -w $lw -align "right";
			radioButtonGrp -nrb 2 -labelArray2 "Press" "Release" -select 1 -cw 1 55 -cw 2 55 fbkey_direction;
		setParent ..;

		// Separator
		rowColumnLayout -nr 1 -ro 1 "top" 5;
			separator -style "none" -bgc 0.41 0.41 0.41 -w 250 -h 1;
		setParent ..;

		// Assign, Cancel
		rowColumnLayout -nr 1 -cs 1 4 -ro 1 "bottom" 5;
			if ( $command == "flip" ) button -l "Assign" -c "fb_verifyKey flip" -w 123 -h 23;
			if ( $command == "ui" ) button -l "Assign" -c "fb_verifyKey ui" -w 123 -h 23;
			button -l "Cancel" -c "deleteUI -window fbkey_window" -w 123 -h 23;
		setParent ..;
	setParent ..;

	showWindow;
}

global proc fb_verifyKey( string $command ) {
	if ( $command == "" ) {
		print "// Error: No command passed.";
	}

	// Query key information
	string $ss = `textField -q -tx fbkey_key`;
	string $key = `substring $ss 1 1`; // Make sure only 1 character is used
	int $ctl = `checkBoxGrp -q -value1 fbkey_modifiers`;
	int $alt = `checkBoxGrp -q -value2 fbkey_modifiers`;
	int $cmd = `checkBoxGrp -q -value3 fbkey_modifiers`;
	int $direction = `radioButtonGrp -q -select fbkey_direction`;

	// Rename "-" to "Dash", required by `hotkey`!
	if ( $key == "-" ) $key = "Dash";

	// Figure out key combo
	string $keyCombo = ( "hotkey -k \"" + $key + "\" " );
	if ( $ctl ) $keyCombo += "-ctl ";
	if ( $alt ) $keyCombo += "-alt ";
	if ( $cmd ) $keyCombo += "-cmd ";

	// Check if key combo is already used
	string $verify = ( "global int $fbc_verifyKey; $fbc_verifyKey = `hotkey -q " );
	if ( $ctl ) $verify += "-ctl ";
	if ( $alt ) $verify += "-alt ";
	if ( $cmd ) $verify += "-cmd ";
	$verify += ( "\"" + $key + "\"`" );

	if ( `runTimeCommand -exists fbc_verifyKey` ) {
		runTimeCommand -e -del fbc_verifyKey;
	}
	global int $fbc_verifyKey;
	runTimeCommand -ann "fbc_verifyKey" -c $verify fbc_verifyKey;
	fbc_verifyKey;
	runTimeCommand -e -del fbc_verifyKey;

	// Get key direction (press/release)
	if ( $direction == 1 ) {
		if ( $command == "flip" ) $keyCombo += "-name \"flipbookFlipCommand\"";
		if ( $command == "ui" ) $keyCombo += "-name \"flipbookUICommand\"";
	} else {
		if ( $command == "flip" ) $keyCombo += "-releaseName \"flipbookFlipCommand\"";
		if ( $command == "ui" ) $keyCombo += "-releaseName \"flipbookUICommand\"";
	}

	// Setup fbc_key runTimeCommand
	if ( `runTimeCommand -exists fbc_key` ) {
		runTimeCommand -e -del fbc_key;
	}
	runTimeCommand -ann "fbc_key" -c $keyCombo fbc_key;

	// Ask for confirmation if necessary
	if ( $fbc_verifyKey ) {
		$confirm = `confirmDialog -t "Overwrite Hotkey"
			-message "The hotkey is assigned to a different command. Do you want to assign it anyway?\nThis will remove both the \"Press\" and \"Release\" hotkey from any previous command."
			-button "Assign"
			-button "Cancel"
			-defaultButton "Assign"
			-cancelButton "Cancel"
			-dismissString "Cancel"`;

		if ( $confirm == "Assign" ) {
			fb_removeKey( $command, "0" );
			fb_assignKey( $key, $ctl, $alt, $cmd, $command ); // Don't need to pass on direction
			deleteUI -window fbkey_window;
		}
	} else {
		fb_assignKey( $key, $ctl, $alt, $cmd, $command );
		deleteUI -window fbkey_window;
	}
}

global proc fb_removeKey( string $command, string $remove ) {
	string $key;
	int $ctl;
	int $alt;
	int $cmd;

	// Query the previous hotkey information from option vars
	if ( $command == "flip" ) {
		$key = `optionVar -q "fbov_key"`;
		$ctl = `optionVar -q "fbov_ctl"`;
		$alt = `optionVar -q "fbov_alt"`;
		$cmd = `optionVar -q "fbov_cmd"`;

		// Clean up option vars
		optionVar -rm fbov_key;
		optionVar -rm fbov_ctl;
		optionVar -rm fbov_alt;
		optionVar -rm fbov_cmd;
	} else {
		$key = `optionVar -q "fbov_keyUI"`;
		$ctl = `optionVar -q "fbov_ctlUI"`;
		$alt = `optionVar -q "fbov_altUI"`;
		$cmd = `optionVar -q "fbov_cmdUI"`;

		// Clean up option vars
		optionVar -rm fbov_keyUI;
		optionVar -rm fbov_ctlUI;
		optionVar -rm fbov_altUI;
		optionVar -rm fbov_cmdUI;
	}

	// Remove hotkey, if it exists
	if (( $key == "" && $remove == "1" ) || ($key == "0" && $remove == "1" )) {
		// Inform user if no hotkey was assigned
		$dialog = `confirmDialog -t "No Hotkey Assigned"
			-message "No hotkey is assigned to this command."
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK"
			-dismissString "OK"`;
	} else {
		// Figure out key combo to remove
		string $keyCombo = ( "hotkey -k \"" + $key + "\" " );
		if ( $ctl ) $keyCombo += "-ctl ";
		if ( $alt ) $keyCombo += "-alt ";
		if ( $cmd ) $keyCombo += "-cmd ";
		$keyCombo += "-name \"\" -releaseName \"\"";

		// Create, run, and remove runTimeCommand with key combo
		if ( `runTimeCommand -exists fbc_removeKey` ) {
			runTimeCommand -e -del fbc_removeKey;
		}
		runTimeCommand -ann "fbc_removeKey" -c $keyCombo fbc_removeKey;
		fbc_removeKey;
		runTimeCommand -e -del fbc_removeKey;

		if ( $remove == "1") {
			// Inform user that the hotkey was removed
			$dialog = `confirmDialog -t "Hotkey Removed!"
				-message ( "The " + $command + " hotkey was successfully removed." )
				-button "OK"
				-defaultButton "OK"
				-cancelButton "OK"
				-dismissString "OK"`;
		}
	}
}

global proc fb_assignKey( string $key, int $ctl, int $alt, int $cmd, string $command ) {
	// Setup name command, could they be setup beforehand?
	if ( $command == "flip" ) {
		nameCommand -ann "flipbookFlip"
			-c "global int $fb_init; if ( $fb_init ) { fb_flip(); } else { global int $fb_hideUI; $fb_hideUI = 1; flipbook(); fb_flip(); }"
			flipbookFlipCommand;

		//  Option Variables
		optionVar -stringValue "fbov_key" $key;
		optionVar -intValue "fbov_ctl" $ctl;
		optionVar -intValue "fbov_alt" $alt;
		optionVar -intValue "fbov_cmd" $cmd;
	} else if ( $command == "ui" ) {
		nameCommand -ann "flipbookUI"
			-c "global int $fb_init; if ( $fb_init ) { flipbookUI(); } else { flipbook(); flipbookUI(); }"
			flipbookUICommand;

		//  Option Variables
		optionVar -stringValue "fbov_keyUI" $key;
		optionVar -intValue "fbov_ctlUI" $ctl;
		optionVar -intValue "fbov_altUI" $alt;
		optionVar -intValue "fbov_cmdUI" $cmd;
	}

	// Assign the key
	fbc_key;

	// Remove the run time command
	if ( `runTimeCommand -exists fbc_key` ) {
		runTimeCommand -e -del fbc_key;
	}

	// Save hotkey preferences
	savePrefs -hotkeys;
}