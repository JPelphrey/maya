// --------------------------------------------------------------------
// unityCamera.mel
// --------------------------------------------------------------------
//
// Author: Morten Dalgaard Andersen
// Author URI: http://www.amorten.com
//
// License: GNU General Public License v2 or later
// License URI: http://www.gnu.org/licenses/gpl-2.0.html
//
// Version: 1.0
// Modified: 2014-01-14
//
// --------------------------------------------------------------------
//
// Instructions on how to use:
//
//  1.	Copy the script to the Maya script folder.
//
//  2.	Execute uc_cam from the script editor.
//


global proc unityCamera () {
	uc_ui();
}

// User Interface
global proc uc_ui() {
	// Remove window and prefs if exist
	if ( `window -exists uc_window`) deleteUI -window uc_window;
	if ( `windowPref -exists uc_window`) windowPref -remove uc_window;

	// Create the window
	string $uc_window = `window
		-t "unityCamera"
		-s false
		-rtf true
		-bgc 0.188 0 0.188
		uc_window`;

	// Setup the window layout
	int $uc_w = 250;
	int $uc_h = 30;
	rowColumnLayout -nr 1;
		columnLayout -rs 5 -co "both" 5;

			// FRAMINGS

			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 5;
				text -l "Framings" -fn "boldLabelFont" -w $uc_w -align "center";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 0;
				button -l "Create Camera and Character" -ebg 0 -bgc 0.941 0.447 0.255 -w $uc_w -h $uc_h -command "uc_CreateFramings";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 0;
				button -l "Create Unity Export Group" -ebg 0 -bgc 0.941 0.447 0.255 -w $uc_w -h $uc_h -command "uc_UnityFramings";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 6 -ro 1 "both" 0;
				button -l "Add" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_addFraming";
				button -l "Set" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_setFraming";
				button -l "Insert" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_insertFraming";
				button -l "Delete" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_deleteFraming";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 6 -ro 1 "both" 0;
				button -l "<<" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_navFraming(\"first\")";
				button -l "<" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_navFraming(\"previous\")";
				button -l ">" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_navFraming(\"next\")";
				button -l ">>" -ebg 0 -bgc 0.753 0.282 0.282 -w 58 -h $uc_h -command "uc_navFraming(\"last\")";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 6 -ro 1 "both" 0;
				button -l "Clean Keys" -ebg 0 -bgc 0.376 0.094 0.282 -w 122 -h $uc_h -command "uc_deleteUnsnapped";
				button -l "Delete All Keys" -ebg 0 -bgc 0.376 0.094 0.282 -w 122 -h $uc_h -command "uc_DeleteFramings";
			setParent ..;

		setParent ..;
		/*
		columnLayout -rs 5 -co "both" 5;

			// SEQUENCE

			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 5;
				text -l "Sequence" -fn "boldLabelFont" -w $uc_w -align "center";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 0;
				button -l "Create Sequence Camera" -ebg 0 -bgc 0.941 0.447 0.255 -w $uc_w -h $uc_h -command "uc_CreateSequence";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 5 -ro 1 "both" 0;
				button -l "Create Unity Export Group" -ebg 0 -bgc 0.941 0.447 0.255 -w $uc_w -h $uc_h -command "uc_UnitySequence";
			setParent ..;

			rowColumnLayout -nr 1 -cs 1 6 -ro 1 "bottom" 5;
				button -l "Delete Sequence" -ebg 0 -bgc 0.376 0.094 0.282 -w $uc_w -h $uc_h -command "uc_DeleteSequence";
			setParent ..;
		*/
		setParent ..;
	setParent ..;

	showWindow;
}

// Create
global proc uc_CreateFramings() {
	if (`objExists "Game_Camera"` || `objExists "Game_Character"`) {
		$confirm = `confirmDialog -t "Replace Game Camera"
				-message "A Game Camera or Game Character already exists. This will delete them and create new ones.\n\nDo you want to continue?"
				-button "Yes"
				-button "No"
				-defaultButton "Yes"
				-cancelButton "No"
				-dismissString "No"`;

		if ( $confirm == "Yes" ) {
			if (`objExists "Game_Camera"`) delete Game_Camera;
			if (`objExists "Game_Character"`) delete Game_Character;
			uc_NewCamera();
			uc_NewCharacter();
		}
	} else {
		uc_NewCamera();
		uc_NewCharacter();
	}
}

global proc uc_NewCamera() {
	// Create and rename camera Game_Camera
	string $cameraName[] = `camera`;
	string $cameraShape = $cameraName[1];
	camera -e -ff "vertical" $cameraShape;
	rename $cameraName[0] "Game_Camera";

	setAttr "Game_Camera.scaleZ" 20;
	setAttr "Game_Camera.scaleX" 20;
	setAttr "Game_Camera.scaleY" 20;
	setAttr Game_CameraShape.displayGateMaskOpacity 0.8;
	setAttr "Game_CameraShape.displayGateMaskColor" -type double3 0 0 0 ;


	// Create the locator
	if (`objExists "uc_Framing"`) delete uc_Framing;
	group -em -n "uc_Framing";

	// Constrain it to the camera
	if (`objExists "uc_PointConstraint"`) delete uc_PointConstraint;
	if (`objExists "uc_OrientConstraint"`) delete uc_OrientConstraint;

	pointConstraint -n "uc_PointConstraint" Game_Camera uc_Framing;
	orientConstraint -n "uc_OrientConstraint" Game_Camera uc_Framing;

	// Create an empty group and parent the locator to the group
	if (`objExists "uc_Camera_GRP"`) delete uc_Camera_GRP;
	group -em -n "uc_Camera_GRP";
	parent uc_Framing uc_Camera_GRP;
	parent Game_Camera uc_Camera_GRP;

	// Add the expression
	if (`objExists "uc_Expression"`) delete uc_Expression;
	expression -s "// Far clip\nfloat $fcp;\n$fcp = `getAttr Game_CameraShape.farClipPlane`;\nsetAttr uc_Framing.scaleY $fcp;\n\n// Near clip\nfloat $ncp;\n$fcp = `getAttr Game_CameraShape.nearClipPlane`;\nsetAttr uc_Framing.scaleY $fcp;\n\n// Field of View\nfloat $fl;\nfloat $vfa;\nfloat $FoV;\n\n// Get focalLength from from the CameraShape node\n$fl = `getAttr Game_CameraShape.focalLength`;\n\n// Get verticalFilmAperture from CameraShape node\n$vfa = `getAttr Game_CameraShape.verticalFilmAperture`;\n\n// Calculate FOV from the two values above\n$FoV = 2.0 * atan((0.5 * $vfa) / ($fl * 0.03937)) * 57.29578;\n\n// Send FOV to scaleZ\nsetAttr uc_Framing.scaleZ $FoV;"  -o "" -n "uc_Expression" -ae 1 -uc all ;
}

global proc uc_NewCharacter() {
	// Create a polyCube with the size of the Game_Character
	polyCube -w 0.4 -h 1.8 -d 0.2 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 0 -n "Game_Character";

	// Translate and lock scale on Game_Character
	setAttr "Game_Character.translateY" 0.9;
	setAttr -lock true "Game_Character.sx";
	setAttr -lock true "Game_Character.sy";
	setAttr -lock true "Game_Character.sz";

	// Move the pivot point
	move 0 0 0 Game_Character.scalePivot Game_Character.rotatePivot ;

	// Vertex color the Game_Character
	select -r Game_Character;
	polyColorPerVertex -r 0.852 -g 0.7045 -b 0.1482 -a 1 -cdo -nun;
	select -cl;

	parent Game_Character uc_Camera_GRP;
}


// Create Framing Export Group
global proc uc_UnityFramings() {
	// Create group to hold new objects
	if (`objExists "uc_UnityFramings"`) delete uc_UnityFramings;
	group -em -n "uc_UnityFramings";

	int $i = 1;
	string $ipName = "uc_InterestPoint";
	string $fName = "uc_Framing";

	// Get last frame
	int $last = `findKeyframe -which "last" Game_Camera`;

	// Start the loop
	for ($i; $i <= $last; $i++) {
		// Set time position
		currentTime $i;

		// New names
		string $ip = $ipName + $i;
		string $fr = $fName + $i;

		// Create empty node based on Game_Character
		float $ip_x = `getAttr -t $i "Game_Character.translateX"`;
		float $ip_y = `getAttr -t $i "Game_Character.translateY"` - 0.9;
		float $ip_z = `getAttr -t $i "Game_Character.translateZ"`;

		group -em -n $ip;
		move -absolute -ws $ip_x $ip_y $ip_z $ip;

		// Create empty node based on uc_Framing (camera)
		float $fr_tx = `getAttr -t $i "uc_Framing.translateX"`;
		float $fr_ty = `getAttr -t $i "uc_Framing.translateY"`;
		float $fr_tz = `getAttr -t $i "uc_Framing.translateZ"`;
		float $fr_rx = `getAttr -t $i "uc_Framing.rotateX"`;
		float $fr_ry = `getAttr -t $i "uc_Framing.rotateY"`;
		float $fr_rz = `getAttr -t $i "uc_Framing.rotateZ"`;
		float $fr_sx = `getAttr -t $i "uc_Framing.scaleX"`;
		float $fr_sy = `getAttr -t $i "uc_Framing.scaleY"`;
		float $fr_sz = `getAttr -t $i "uc_Framing.scaleZ"`;

		group -em -n $fr;
		move -absolute -ws $fr_tx $fr_ty $fr_tz $fr;
		rotate -absolute -ws $fr_rx $fr_ry $fr_rz $fr;
		scale -absolute $fr_sx $fr_sy $fr_sz $fr;

		// Parent order: framing -> interestPoint -> group
		parent $fr $ip;
		parent $ip uc_UnityFramings;

	}

	select -r uc_UnityFramings;
	uc_ExportFramings;
}

global proc uc_CreateSequence() {
	if (`objExists "uc_SeqCamera_GRP"`) {
		$confirm = `confirmDialog -t "Replace Seq Camera"
			-message "A Sequence Camera already exists. This will delete it and create a new one.\n\nDo you want to continue?"
			-button "Yes"
			-button "No"
			-defaultButton "Yes"
			-cancelButton "No"
			-dismissString "No"`;

		if ($confirm == "Yes") {
			uc_NewSeqCamera();
		}
	} else {
		uc_NewSeqCamera();
	}
}

global proc uc_NewSeqCamera() {
	// Does it already exists?
	if (`objExists "uc_SeqCamera_GRP"`) delete uc_SeqCamera_GRP;
	if (`objExists "uc_SeqExpression"`) delete uc_SeqExpression;

	// Create and rename camera Seq_Camera
	string $cameraName[] = `camera`;
	string $cameraShape = $cameraName[1];
	camera -e -ff "vertical" $cameraShape;
	rename $cameraName[0] "Seq_Camera";

	setAttr "Seq_Camera.scaleZ" 20;
	setAttr "Seq_Camera.scaleX" 20;
	setAttr "Seq_Camera.scaleY" 20;
	setAttr Seq_CameraShape.displayGateMaskOpacity 0.8;
	setAttr "Seq_CameraShape.displayGateMaskColor" -type double3 0 0 0 ;


	// Create the locator
	if (`objExists "uc_SeqNode"`) delete uc_SeqNode;
	group -em -n "uc_SeqNode";

	// Constrain it to the camera
	if (`objExists "uc_SeqPointConstraint"`) delete uc_SeqPointConstraint;
	if (`objExists "uc_SeqOrientConstraint"`) delete uc_SeqOrientConstraint;

	pointConstraint -n "uc_SeqPointConstraint" Seq_Camera uc_SeqNode;
	orientConstraint -n "uc_SeqOrientConstraint" Seq_Camera uc_SeqNode;

	// Create an empty group and parent the locator to the group
	if (`objExists "uc_SeqCamera_GRP"`) delete uc_SeqCamera_GRP;
	group -em -n "uc_SeqCamera_GRP";
	parent uc_SeqNode uc_SeqCamera_GRP;
	parent Seq_Camera uc_SeqCamera_GRP;

	// Add the expression
	if (`objExists "uc_SeqExpression"`) delete uc_SeqExpression;
	expression -s "// Far clip\nfloat $fcp;\n$fcp = `getAttr Seq_CameraShape.farClipPlane`;\nsetAttr uc_SeqNode.scaleY $fcp;\n\n// Near clip\nfloat $ncp;\n$fcp = `getAttr Seq_CameraShape.nearClipPlane`;\nsetAttr uc_SeqNode.scaleY $fcp;\n\n// Field of View\nfloat $fl;\nfloat $vfa;\nfloat $FoV;\n\n// Get focalLength from from the CameraShape node\n$fl = `getAttr Seq_CameraShape.focalLength`;\n\n// Get verticalFilmAperture from CameraShape node\n$vfa = `getAttr Seq_CameraShape.verticalFilmAperture`;\n\n// Calculate FOV from the two values above\n$FoV = 2.0 * atan((0.5 * $vfa) / ($fl * 0.03937)) * 57.29578;\n\n// Send FOV to scaleZ\nsetAttr uc_SeqNode.scaleZ $FoV;"  -o "" -n "uc_SeqExpression" -ae 1 -uc all ;
}

global proc uc_UnitySequence() {
	if (`objExists "uc_UnitySequence"`) delete uc_UnitySequence;
	group -em -n "uc_UnitySequence";

	// Duplicate and re-parent to new group
	duplicate -ic -n "uc_SeqCamera" uc_SeqNode;
	parent -w uc_SeqCamera;
	parent uc_SeqCamera uc_UnitySequence;

	// Bake animation
	int $bakeStart = `findKeyframe -w "first" Seq_Camera`;
	int $bakeEnd = `findKeyframe -w "last" Seq_Camera`;
	string $bakeTime = $bakeStart + ":" + $bakeEnd;
	string $bakeObj = "uc_SeqCamera";
	bakeResults
		-simulation false
		-t $bakeTime
		-sampleBy 1
		-disableImplicitControl true
		-preserveOutsideKeys true
		-sparseAnimCurveBake false
		-removeBakedAttributeFromLayer false
		-removeBakedAnimFromLayer false
		-bakeOnOverrideLayer false
		-minimizeRotation true
		-controlPoints false
		-shape true
		uc_SeqCamera;

	// Delete the constraints
	select -hi uc_SeqCamera;
	select -d uc_SeqCamera;
	delete;

	select -r uc_UnitySequence;
	uc_ExportSequence;
}


// Delete
global proc uc_DeleteFramings() {
	$confirm = `confirmDialog -t "Delete All Framings"
				-message "Are you sure?"
				-button "Yes"
				-button "No"
				-defaultButton "Yes"
				-cancelButton "No"
				-dismissString "No"`;

	if ($confirm == "Yes") {
		int $s = `findKeyframe -w "first" Game_Camera`;
		int $e = `findKeyframe -w "last" Game_Camera`;
		string $time = $s + ":" + $e;
		cutKey -time $time -clear Game_Camera Game_Character;

		uc_deleteUnsnapped;

		/*
		if (`objExists "uc_Camera_GRP"`) delete uc_Camera_GRP;
		if (`objExists "Game_Camera"`) delete Game_Camera;
		if (`objExists "Game_Character"`) delete Game_Character;
		if (`objExists "uc_Expression"`) delete uc_Expression;
		*/
	}
}

global proc uc_DeleteSequence() {
	$confirm = `confirmDialog -t "Delete Sequence"
				-message "Are you sure?"
				-button "Yes"
				-button "No"
				-defaultButton "Yes"
				-cancelButton "No"
				-dismissString "No"`;

	if ($confirm == "Yes") {
		if (`objExists "uc_SeqCamera_GRP"`) delete uc_SeqCamera_GRP;
		if (`objExists "uc_SeqExpression"`) delete uc_SeqExpression;
	}
}


global proc uc_keyFraming(int $time) {

	// Transform attributes
	string $attr[] = {"tx", "ty", "tz", "rx", "ry", "rz"};

	// Set keyframe on camera and character
	setKeyframe
		-at "fl"
		-time $time
		-itt linear
		-ott linear
		Game_CameraShape;

	for ($i = 0; $i < size($attr); $i++) {
		setKeyframe
			-at $attr[$i]
			-time $time
			-itt linear
			-ott linear
			Game_Camera Game_Character;
	}

	currentTime $time;

}

global proc uc_addFraming() {

	if ( `keyframe -q -keyframeCount Game_Camera Game_Character` < 1 ) {

		uc_keyFraming(1);

	} else {

		int $time = `findKeyframe -which "last" Game_Camera` + 1;
		uc_keyFraming($time);

	}

}

global proc uc_setFraming() {

	int $time = `currentTime -q`;

	if ( `keyframe -q -keyframeCount Game_Camera Game_Character` < 1 ) {

		uc_keyFraming(1);

	} else if ($time > `findKeyframe -which "last" Game_Camera`) {

		$time = `findKeyframe -which "last" Game_Camera` + 1;
		uc_keyFraming($time);

	} else {

		uc_keyFraming($time);

	}

}

global proc uc_insertFraming() {

	int $time = `currentTime -q`;

	if ( `keyframe -q -keyframeCount Game_Camera Game_Character` < 1 ) {

		uc_keyFraming(1);

	} else if ($time <= `findKeyframe -which "last" Game_Camera`) {

		string $range = $time + ":" + `findKeyframe -w "last" Game_Camera`;
		keyframe -r -tc 1 -t $range Game_Camera Game_Character;
		uc_keyFraming($time);

	} else {

		$time = `findKeyframe -which "last" Game_Camera` + 1;
		uc_keyFraming($time);

	}

}

global proc uc_deleteFraming() {

	int $time = `currentTime -q`;
	string $range = `findKeyframe -which "next" Game_Camera` + ":" + `findKeyframe -which "last" Game_Camera`;

	cutKey -time $time -clear Game_Camera Game_Character;
	keyframe -r -tc -1 -t $range Game_Camera Game_Character;

	uc_deleteUnsnapped;
}

global proc uc_deleteUnsnapped() {
	selectKey -unsnappedKeys 1 -t ":" -shape 1 Game_Character Game_Camera;
	cutKey -clear;
}

global proc uc_navFraming(string $which) {
	currentTime `findKeyframe -which $which Game_Camera`;
}

global proc uc_ExportFramings() {
	// File
	string $fileFilters = "FBX Export (*.fbx)";
	string $dir = `workspace -q -dir`;

	string $file[] = `fileDialog2
		-dialogStyle 2
		-caption "FBX Export Selection..."
		-fileFilter $fileFilters
		-selectFileFilter "FBX Export"
		-dir $dir`;

	if (size($file)) {
		// Export Properties
		FBXProperty Export|IncludeGrp|Animation -v 0;

		FBXExportCameras -v 0;
		FBXExportConstraints -v 0;
		FBXExportLights -v 0;
		FBXExportInputConnections -v 1;
		FBXExportScaleFactor 1.00; // float
		FBXExportFileVersion -v "FBX201400";

		// Export
		FBXExport -f $file -s;
	}
}

global proc uc_ExportSequence() {
	// File
	string $fileFilters = "FBX Export (*.fbx)";
	string $dir = `workspace -q -dir`;

	string $file[] = `fileDialog2
		-dialogStyle 2
		-caption "FBX Export Selection..."
		-fileFilter $fileFilters
		-selectFileFilter "FBX Export"
		-dir $dir`;

	// int $start = `findKeyframe -which "first" Seq_Camera`;
	// int $end = `findKeyframe -which "last" Seq_Camera`;

	if (size($file)) {
		// Export Properties
		FBXProperty Export|IncludeGrp|Animation -v 1;
		// FBXExportBakeComplexAnimation -v 0;
		// FBXExportBakeComplexStart -v $start;
		// FBXExportBakeComplexEnd -v $end;
		// FBXExportBakeComplexStep -v 1;

		FBXExportCameras -v 0;
		FBXExportConstraints -v 0;
		FBXExportLights -v 0;
		FBXExportInputConnections -v 1;
		FBXExportScaleFactor 1.00; // float
		FBXExportFileVersion -v "FBX201400";

		// Export
		FBXExport -f $file -s;
	}
}